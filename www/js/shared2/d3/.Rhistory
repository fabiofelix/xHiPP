}
if(type[i] == "treino")
source = source[which(source$name %in% train.files), ]
else if(type[i] == "validacao")
source = source[which(source$name %in% val.files), ]
else if(type[i] == "teste")
source = source[which(source$name %in% teste.files), ]
source = source[order(source$name), ]
source[, "name"] = paste(source[, "name"], ".png", sep = "")
write.table(source, name, row.names = FALSE, quote = FALSE, sep = ",", dec = ".")
source[, "name"] = gsub(".png", ".jpg", source[, "name"])
write.data(source, name2)
rm(source)
}
}
}
#1. Extrai os conjuntos: treinamento, validacao, teste
#2. Normaliza CADA UMA das partes da base SEPARADAMENTE
split.norm = function(source, type, norm, target.path, comp, train.files, val.files, teste.files)
{
source_back = source
for(i in 1:length(type))
{
for(j in 1:length(norm))
{
source = source_back[, -ncol(source_back)]
if(type[i] == "treino")
source = source[which(source$name %in% train.files), ]
else if(type[i] == "validacao")
source = source[which(source$name %in% val.files), ]
else if(type[i] == "teste")
source = source[which(source$name %in% teste.files), ]
if(norm[j] != "")
source = norm.stand(source, norm[j])
source = merge(source, source_back[, c("name", "group")], "name")
name  = file.path(target.path, paste(type[i], comp, ".csv", sep = ""));
name2 = file.path(target.path, paste(type[i], comp, ".data", sep = ""));
if(norm[j] != "")
{
name = file.path(target.path, paste(type[i], comp, "_", ifelse(norm[j] == "sig", "sigmoidal", norm[j]), ".csv", sep = ""));
name2 = file.path(target.path, paste(type[i], comp, "_", ifelse(norm[j] == "sig", "sigmoidal", norm[j]), ".data", sep = ""));
}
source = source[order(source$name), ]
source[, "name"] = paste(source[, "name"], ".png", sep = "")
write.table(source, name, row.names = FALSE, quote = FALSE, sep = ",", dec = ".")
source[, "name"] = gsub(".png", ".jpg", source[, "name"])
write.data(source, name2)
rm(source)
}
}
}
#1. Extrai os conjuntos: treinamento, validacao, teste
#2. Normaliza CADA UMA das partes da base com as estatísticas do TREINAMENTO
split.norm2 = function(source, type, norm, target.path, comp, train.files, val.files, teste.files)
{
source_back = source
train = source[which(source$name %in% train.files), ]
cols = get.numeric.columns(train[, -ncol(train)]);
train.aux = train[, cols]
train.mean  = rep(0, ncol(train));
train.sd    = rep(0, ncol(train));
train.min   = rep(0, ncol(train));
train.max   = rep(0, ncol(train));
train.mean[cols] = colMeans(train.aux);
train.sd[cols]    = apply(train.aux, 2, sd);
train.min[cols]   = apply(train.aux, 2, min);
train.max[cols]   = apply(train.aux, 2, max);
for(i in 1:length(type))
{
for(j in 1:length(norm))
{
source = source_back[, -ncol(source_back)]
if(type[i] == "treino")
source = source[which(source$name %in% train.files), ]
else if(type[i] == "validacao")
source = source[which(source$name %in% val.files), ]
else if(type[i] == "teste")
source = source[which(source$name %in% teste.files), ]
if(norm[j] != "")
source = norm.stand2(source, norm[j], train.min, train.max, train.mean, train.sd)
source = merge(source, source_back[, c("name", "group")], "name")
name  = file.path(target.path, paste(type[i], comp, ".csv", sep = ""));
name2 = file.path(target.path, paste(type[i], comp, ".data", sep = ""));
if(norm[j] != "")
{
name = file.path(target.path, paste(type[i], comp, "_", ifelse(norm[j] == "sig", "sigmoidal", norm[j]), ".csv", sep = ""));
name2 = file.path(target.path, paste(type[i], comp, "_", ifelse(norm[j] == "sig", "sigmoidal", norm[j]), ".data", sep = ""));
}
source = source[order(source$name), ]
source[, "name"] = paste(source[, "name"], ".png", sep = "")
write.table(source, name, row.names = FALSE, quote = FALSE, sep = ",", dec = ".")
source[, "name"] = gsub(".png", ".jpg", source[, "name"])
write.data(source, name2)
rm(source)
}
}
}
#1. Extrai os conjuntos: validacao, teste
#2. Normaliza CADA UMA das partes da base com as estatísticas do TREINAMENTO
split.norm3 = function(train, source, type, norm, target.path, comp, train.files, val.files, teste.files)
{
source_back = source
# train = source[which(source$name %in% train.files), ]
cols = get.numeric.columns(train);
train.aux = train[, cols]
train.mean  = rep(0, ncol(train));
train.sd    = rep(0, ncol(train));
train.min   = rep(0, ncol(train));
train.max   = rep(0, ncol(train));
train.mean[cols]  = colMeans(train.aux);
train.sd[cols]    = apply(train.aux, 2, sd);
train.min[cols]   = apply(train.aux, 2, min);
train.max[cols]   = apply(train.aux, 2, max);
for(i in 1:length(type))
{
for(j in 1:length(norm))
{
source = source_back[, -ncol(source_back)]
# if(type[i] == "treino")
#   source = source[which(source$name %in% train.files), ]
# else
if(type[i] == "validacao")
source = source[which(source$name %in% val.files), ]
else if(type[i] == "teste")
source = source[which(source$name %in% teste.files), ]
# if(norm[j] != "")
source = norm.stand2(source, norm[j], train.min, train.max, train.mean, train.sd)
source = merge(source, source_back[, c("name", "group")], "name")
name  = file.path(target.path, paste(type[i], comp, ".csv", sep = ""));
name2 = file.path(target.path, paste(type[i], comp, ".data", sep = ""));
# if(norm[j] != "")
# {
name = file.path(target.path, paste(type[i], comp, "_", ifelse(norm[j] == "sig", "sigmoidal", norm[j]), ".csv", sep = ""));
name2 = file.path(target.path, paste(type[i], comp, "_", ifelse(norm[j] == "sig", "sigmoidal", norm[j]), ".data", sep = ""));
# }
source = source[order(source$name), ]
source[, "name"] = paste(source[, "name"], ".png", sep = "")
write.table(source, name, row.names = FALSE, quote = FALSE, sep = ",", dec = ".")
source[, "name"] = gsub(".png", ".jpg", source[, "name"])
write.data(source, name2)
rm(source)
}
}
}
# Extrai os conjuntos separados: costarica, costarica1, costarica2, jubarte, jubarte1, jubarte2
#2. Normaliza CADA UMA das partes da base SEPARADAMENTE
split.area = function(source, norm = c("", "minmax", "zscore", "sig"), target.path, comp)
{
type = list(
costarica  = 1:3061,
costarica1 = 1:1246,
costarica2 = 1247:3061,
jubarte    = 3062:3541,
jubarte1   = 3062:3261,
jubarte2   = 3262:3541
);
source = source[order(source$name), ]
for(i in 1:length(type))
{
for(j in 1:length(norm))
{
data = source[type[[i]], ]
if(norm[j] != "")
{
data = norm.stand(data[, -ncol(data)], norm[j])
data = merge(data, source[type[[i]], c(1, ncol(source))], "name");
}
name  = file.path(target.path, paste(names(type[i]), comp, ".csv", sep = ""));
name2 = file.path(target.path, paste(names(type[i]), comp, ".data", sep = ""));
if(norm[j] != "")
{
name  = file.path(target.path, paste(names(type[i]), comp, "_", ifelse(norm[j] == "sig", "sigmoidal", norm[j]), ".csv", sep = ""));
name2 = file.path(target.path, paste(names(type[i]), comp, "_", ifelse(norm[j] == "sig", "sigmoidal", norm[j]), ".data", sep = ""));
}
data[, "name"] = paste(data[, "name"], ".png", sep = "")
write.table(data, name, row.names = FALSE, quote = FALSE, sep = ",", dec = ".")
data[, "name"] = gsub(".png", ".jpg", data[, "name"])
write.data(data, name2);
rm(data)
}
}
}
#Associa descritores com indices
join1 = function(path1, path2, path.target)
{
file   = list.files(path1, patter = ".csv")
for(i in 1:length(file))
{
p1 = read_delim(file.path(path1, file[i]),  ",", escape_double = FALSE, trim_ws = TRUE, col_names = TRUE)
p2 = read_delim(file.path(path2, file[i]),  ",", escape_double = FALSE, trim_ws = TRUE, col_names = TRUE)
p12 = merge(p1[, -ncol(p1)], p2, "name")
p12 = p12[order(p12$name), ]
write.table(p12, file.path(path.target, file[i]), row.names = FALSE, quote = FALSE, dec = ".", sep = ",")
name = paste(tools::file_path_sans_ext(file[i]), ".data", sep = "")
# p12[, "name"] = paste(p12[, "name"], ".jpg", sep = "")
write.data(p12, file.path(path.target, name))
rm(p1, p2, p12)
}
}
#Associa autoencoder com indices
join2 = function(path1, path2, path.target, order.file2)
{
file   = list.files(path1, pattern = ".csv")
file2  = list.files(path2, pattern = ".csv")
file2 = file2[order.file2];
# View(data.frame(file, file2));
for(i in 1:length(file))
# for(i in c(2))
{
cat("=============================================================================\n")
cat("  Abrindo ", file.path(path1, file[i]), " e ", file.path(path2, file2[i]), "\n")
p1 = read_delim(file.path(path1, file[i]),  ",", escape_double = FALSE, trim_ws = TRUE, col_names = (i != 4))
p2 = read_delim(file.path(path2, file2[i]),  ",", escape_double = FALSE, trim_ws = TRUE, col_names = TRUE)
if(i == 4)
colnames(p1)[1] = "name"
cat("  Juntando ", file.path(path1, file[i]), " com ", file.path(path2, file2[i]), "\n")
p12 = merge(p1[, -ncol(p1)], p2, "name")
p12 = p12[order(p12$name), ]
cat("  Salvando .csv\n")
write.table(p12, file.path(path.target, file[i]), row.names = FALSE, quote = FALSE, dec = ".", sep = ",")
name = paste(substr(file[i], 1, nchar(file[i]) - 4), ".data", sep = "")
cat("  Salvando .data\n")
# p12[, "name"] = paste(p12[, "name"], ".jpg", sep = "")
write.data(p12, file.path(path.target, name))
rm(p1, p2, p12)
}
}
#Criar um arquivo único para AUTOENCODER
join3 = function(train.path, validation.path, test.path, name)
{
train = read_delim(train.path, delim = ",")
train = data.frame(train)
train[, "name"] = substr(train[, "name"], 1, nchar(train[, "name"]) - 4)
train = set.label(train)
val = read.csv(validation.path, stringsAsFactors = FALSE);
val[, "name"] = substr(val[, "name"], 1, nchar(val[, "name"]) - 4)
val = set.label(val)
test = read.csv(test.path, stringsAsFactors = FALSE);
test[, "name"] = substr(test[, "name"], 1, nchar(test[, "name"]) - 4)
test = set.label(test)
original = rbind(train, val, test);
original = original[order(original$name), ]
original[, "name"] = paste(original[, "name"], ".png", sep = "")
write.table(original, paste(name, ".csv", sep = "" ), row.names = FALSE, quote = FALSE, sep = ",", dec = ".")
original[, "name"] = gsub(".png", ".jpg", original[, "name"])
write.data(original, paste(name, ".data", sep = "" ))
}
show.indices = function(path.original, path.minmax, path.zscore, path.sig, legend.position = c(-30, -700))
{
indices = read.csv(path.original, stringsAsFactors = FALSE,  dec = ".", sep = ",")
indices.minmax = read.csv(path.minmax, stringsAsFactors = FALSE, dec = ".", sep = ",")
indices.zscore = read.csv(path.zscore, stringsAsFactors = FALSE,  dec = ".", sep = ",")
indices.sig    = read.csv(path.sig, stringsAsFactors = FALSE,  dec = ".", sep = ",")
set.seed(1844)
vis.indices = forceScheme(dist(indices[, -c(1, 27)]))
set.seed(1844)
vis.indices.minmax = forceScheme(dist(indices.minmax[, -c(1, 27)]))
set.seed(1844)
vis.indices.zscore = forceScheme(dist(indices.zscore[, -c(1, 27)]))
set.seed(1844)
vis.indices.sig = forceScheme(dist(indices.sig[, -c(1, 27)]))
par(mfrow = c(2, 2), mar = c(0.5, 0.5, 1.5, 0.5));
plot(vis.indices, bg = indices[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Original");
legend(legend.position[1], legend.position[2],
as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")),
lty = c(1, 1), col = as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")),
box.lty = 0, bg = "transparent")
plot(vis.indices.minmax, bg = indices.minmax[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Minmax");
plot(vis.indices.zscore, bg = indices.zscore[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Zscore");
plot(vis.indices.sig, bg = indices.sig[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Sigmoidal");
par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1));
}
show.descritores = function(path.original, path.minmax, path.zscore, path.sig, legend.position = c(1, 1))
{
descritores = read.csv(path.original, stringsAsFactors = FALSE,  dec = ".", sep = ";")
descritores.minmax = read.csv(path.minmax, stringsAsFactors = FALSE, dec = ".", sep = ";")
descritores.zscore = read.csv(path.zscore, stringsAsFactors = FALSE,  dec = ".", sep = ";")
descritores.sig    = read.csv(path.sig, stringsAsFactors = FALSE,  dec = ".", sep = ";")
set.seed(1844)
vis.descritores = forceScheme(dist(descritores[, -c(1, 602)]))
set.seed(1844)
vis.descritores.minmax = forceScheme(dist(descritores.minmax[, -c(1, 602)]))
set.seed(1844)
vis.descritores.zscore = forceScheme(dist(descritores.zscore[, -c(1, 602)]))
set.seed(1844)
vis.descritores.sig = forceScheme(dist(descritores.sig[, -c(1, 602)]))
par(mfrow = c(2, 2), mar = c(0.5, 0.5, 1.5, 0.5));
plot(vis.descritores, bg = descritores[, 602], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Original");
legend(legend.position[1], legend.position[2], as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")), lty = c(1, 1), col = as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")), box.lty = 0, bg = "transparent")
plot(vis.descritores.minmax, bg = descritores.minmax[, 602], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Minmax");
plot(vis.descritores.zscore, bg = descritores.zscore[, 602], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Zscore");
plot(vis.descritores.sig, bg = descritores.sig[, 602], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Sigmoidal");
par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1));
}
show.desc.ind = function(path.original, path.minmax, path.zscore, path.sig, legend.position = c(-80, -700))
{
desc_ind = read.csv(path.original, stringsAsFactors = FALSE,  dec = ".", sep = ";")
desc_ind.minmax = read.csv(path.minmax, stringsAsFactors = FALSE, dec = ".", sep = ";")
desc_ind.zscore = read.csv(path.zscore, stringsAsFactors = FALSE,  dec = ".", sep = ";")
desc_ind.sig    = read.csv(path.sig, stringsAsFactors = FALSE,  dec = ".", sep = ";")
set.seed(1844)
vis.desc_ind = forceScheme(dist(desc_ind[, -c(1, 627)]))
set.seed(1844)
vis.desc_ind.minmax = forceScheme(dist(desc_ind.minmax[, -c(1, 627)]))
set.seed(1844)
vis.desc_ind.zscore = forceScheme(dist(desc_ind.zscore[, -c(1, 627)]))
set.seed(1844)
vis.desc_ind.sig = forceScheme(dist(desc_ind.sig[, -c(1, 627)]))
par(mfrow = c(2, 2), mar = c(0.5, 0.5, 1.5, 0.5));
plot(vis.desc_ind, bg = desc_ind[, 627], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Original");
legend(legend.position[1], legend.position[2], as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")), lty = c(1, 1), col = as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")), box.lty = 0, bg = "transparent")
plot(vis.desc_ind.minmax, bg = desc_ind.minmax[, 627], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Minmax");
plot(vis.desc_ind.zscore, bg = desc_ind.zscore[, 627], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Zscore");
plot(vis.desc_ind.sig, bg = desc_ind.sig[, 627], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Sigmoidal");
par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1));
}
show.encoder.aux = function(type, group.index, file.norm, show.main)
{
for(n in c("minmax", "zscore", "sigmoidal"))
{
name = file.norm[grepl(paste(type, "_", n, sep = ""), file.norm)]
aux1 = read_delim(name[1], delim = ";")
aux1 = data.frame(aux1)
vis.aux1 = forceScheme(dist(aux1[, -c(1, group.index)]))
text.main = ifelse(show.main, n, "")
plot(vis.aux1, bg = aux1[, group.index], col = "black",  pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n",
main = text.main)
}
}
show.autoencoder = function(path, path.norm = NULL, file.pattern = "", group.index = c(162, 23042),
file.prefix = c("160", "23040"), legend.pos = c(140, 6))
{
file = list.files(path, pattern = paste(file.pattern, ".*csv", sep = ""), full.names = TRUE)
data1 = read_delim(file[grepl(file.prefix[2], file)][1], delim = ";")
data1 = data.frame(data1)
data2 = read.table(file[grepl(file.prefix[1], file)][1], sep = ";", dec = ".", stringsAsFactors = FALSE, header = TRUE)
set.seed(1844)
vis.data1 = forceScheme(dist(data1[, -c(1, group.index[2])]))
set.seed(1844)
vis.data2 = forceScheme(dist(data2[, -c(1, group.index[1])]))
if(!is.null(path.norm) && !is.na(path.norm))
file.norm = list.files(path.norm, pattern = paste(file.pattern, ".*csv", sep = ""), full.names = TRUE)
if(is.null(path.norm))
par(mfrow = c(1, 2))
else
par(mfrow = c(2, 4), oma = c(0, 1, 0, 0), mar = c(0.5, 1.0, 1.5, 0.5));
plot(vis.data1, bg = data1[, group.index[2]], col = "black",  pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n")
legend(legend.pos[1], legend.pos[2], as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")), lty = c(1, 1),
col = as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")), bty = "n", box.lty = 0)
if(!is.null(path.norm))
{
mtext(file.prefix[2], cex = 1.5, side = 2, outer = TRUE, adj = 0.76, padj = 0.5)
show.encoder.aux(file.prefix[2], group.index[2], file.norm, TRUE)
}
plot(vis.data2, bg = data2[, group.index[1]], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n");
if(!is.null(path.norm))
{
mtext(file.prefix[1], cex = 1.5, side = 2, outer = TRUE, adj = 0.2, padj = 0.5)
show.encoder.aux(file.prefix[1], group.index[1], file.norm, FALSE)
}
par(mfrow = c(1, 1), oma = c(0, 0, 0, 0), mar = c(5.1, 4.1, 4.1, 2.1));
}
show.area = function(path.original, path.cr = c(), path.jb = c(), legend.position = c(-30, -700))
{
all  = read.csv(path.original, stringsAsFactors = FALSE,  dec = ".", sep = ",")
cr   = read.csv(path.cr[1], stringsAsFactors = FALSE, dec = ".", sep = ",")
cr1  = read.csv(path.cr[2], stringsAsFactors = FALSE,  dec = ".", sep = ",")
cr2  = read.csv(path.cr[3], stringsAsFactors = FALSE,  dec = ".", sep = ",")
jb   = read.csv(path.jb[1], stringsAsFactors = FALSE, dec = ".", sep = ",")
jb1  = read.csv(path.jb[2], stringsAsFactors = FALSE,  dec = ".", sep = ",")
jb2  = read.csv(path.jb[3], stringsAsFactors = FALSE,  dec = ".", sep = ",")
set.seed(1844)
vis.all = forceScheme(dist(all[, -c(1, ncol(all))]))
set.seed(1844)
vis.cr = forceScheme(dist(cr[, -c(1, ncol(cr))]))
set.seed(1844)
vis.cr1 = forceScheme(dist(cr1[, -c(1, ncol(cr1))]))
set.seed(1844)
vis.cr2 = forceScheme(dist(cr2[, -c(1, ncol(cr2))]))
set.seed(1844)
vis.jb = forceScheme(dist(jb[, -c(1, ncol(jb))]))
set.seed(1844)
vis.jb1 = forceScheme(dist(jb1[, -c(1, ncol(jb1))]))
set.seed(1844)
vis.jb2 = forceScheme(dist(jb2[, -c(1, ncol(jb2))]))
par(mfrow = c(3, 3), mar = c(0.5, 0.5, 1.5, 0.5));
plot.new()
plot(vis.all, bg = all[, ncol(all)], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Original");
legend(legend.position[1], legend.position[2],
as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")),
lty = c(1, 1), col = as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")),
box.lty = 0, bg = "transparent")
plot.new()
plot(vis.cr, bg  = cr[, ncol(cr)], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Costa Rica");
plot(vis.cr1, bg = cr1[, ncol(cr1)], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Costa Rica 1");
plot(vis.cr2, bg = cr2[, ncol(cr2)], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Costa Rica 2");
plot(vis.jb, bg  = jb[, ncol(jb)], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Jubarte");
plot(vis.jb1, bg = jb1[, ncol(jb1)], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Jubarte 1");
plot(vis.jb2, bg = jb2[, ncol(jb2)], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Jubarte 2");
par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1));
}
show.test = function(list.path, type, prefix, group.index)
{
list.norm = c("minmax", "zscore", "sigmoidal");
list.main.norm = c("Minmax", "ZScore", "Sigmoidal")
list.mtext = c("Global", "Local", "Treinamento")
list.adj = c(0.86, 0.49, 0.1)
par(mfrow = c(3, 3), oma = c(0, 1, 0, 0), mar = c(0.2, 1.8, 1.5, 0.2));
for(i in 1:length(list.path))
{
for(j in 1:length(list.norm))
{
name = file.path(list.path[i], type, paste(prefix, "_", list.norm[j], ".csv", sep = ""))
data = read_delim(name, ";", escape_double = FALSE, trim_ws = TRUE, col_names = TRUE)
data = data.frame(data)
set.seed(1844)
vis  = forceScheme(dist(data[, -c(1, group.index)]))
plot(vis, bg = data[, group.index], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n",
main = ifelse(i == 1, list.main.norm[j], ""));
if(j == 1)
mtext(list.mtext[i], cex = 1.5, side = 2, outer = TRUE, adj = list.adj[i], padj = 1)
rm(name, data, vis)
}
}
par(mfrow = c(1, 1), oma = c(0, 0, 0, 0), mar = c(5.1, 4.1, 4.1, 2.1));
}
set.label = function(dataset)
{
for(k in 1:nrow(dataset))
{
name = as.character(dataset[k, "name"])
name = strsplit(name, "_")
name = unlist(name)
if(name[1] == "015089")
dataset[k, "group"] = 1
else if(name[1] == "015104")
dataset[k, "group"] = 2
else if(name[1] == "op3")
dataset[k, "group"] = 3
else if(name[1] == "op4")
dataset[k, "group"] = 4
else if(name[1] == "laje")
dataset[k, "group"] = 5;
}
return(dataset);
}
source = read.csv("~/Documentos/Mestrado/Pesquisa/Soundscape/TESTE/indices.csv", stringsAsFactors = FALSE);
source = set.label(source)
dim(source)
source = read.csv("~/Documentos/Mestrado/Pesquisa/Soundscape/TESTE/indices.csv", stringsAsFactors = FALSE);
dim(source)
source = set.label(source)
set.seed(1844)
vis = forceScheme(dist(source[, -c(1, 27)]))
plot(vis, bg = source[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n");
indices.minmax = norm.stand(source, "minmax")
indices.zscore = norm.stand(source, "zscore")
indices.sig    = norm.stand(source, "sig")
View(indices.minmax)
set.seed(1844)
vis.indices = forceScheme(dist(source[, -c(1, 27)]))
set.seed(1844)
vis.indices.minmax = forceScheme(dist(indices.minmax[, -c(1, 27)]))
set.seed(1844)
vis.indices.zscore = forceScheme(dist(indices.zscore[, -c(1, 27)]))
set.seed(1844)
vis.indices.sig = forceScheme(dist(indices.sig[, -c(1, 27)]))
par(mfrow = c(2, 2), mar = c(0.5, 0.5, 1.5, 0.5));
plot(vis.indices, bg = source[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Original");
legend(legend.position[1], legend.position[2],
as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")),
lty = c(1, 1), col = as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")),
box.lty = 0, bg = "transparent")
plot(vis.indices.minmax, bg = indices.minmax[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Minmax");
plot(vis.indices.zscore, bg = indices.zscore[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Zscore");
plot(vis.indices.sig, bg = indices.sig[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Sigmoidal");
par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1));
dim(indices.minmax)
dim(indices.zscore)
dim(indices.sig)
par(mfrow = c(2, 2), mar = c(0.5, 0.5, 1.5, 0.5));
plot(vis.indices, bg = source[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Original");
legend(legend.position[1], legend.position[2],
as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")),
lty = c(1, 1), col = as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")),
box.lty = 0, bg = "transparent")
plot(vis.indices.minmax, bg = indices.minmax[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Minmax");
par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1));
View(indices.minmax)
table(indices.minmax[, 27])
indices.minmax[indices.minmax$group == 0, 27] = 1
indices.minmax = set.label(indices.minmax)
indices.zscore = set.label(indices.zscore)
indices.sig    = set.label(indices.sig)
plot(vis.indices, bg = source[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Original");
par(mfrow = c(2, 2), mar = c(0.5, 0.5, 1.5, 0.5));
plot(vis.indices, bg = source[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Original");
# legend(legend.position[1], legend.position[2],
#        as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")),
#        lty = c(1, 1), col = as.factor(c("Costa Rica 1", "Costa Rica 2", "Jubarte 1", "Jubarte 2")),
#        box.lty = 0, bg = "transparent")
plot(vis.indices.minmax, bg = indices.minmax[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Minmax");
plot(vis.indices.zscore, bg = indices.zscore[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Zscore");
plot(vis.indices.sig, bg = indices.sig[, 27], col = "black", pch = 21, xlab = "", ylab = "", xaxt = "n", yaxt = "n", main = "Sigmoidal");
par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1));
shiny::runApp('~/Documentos/Mestrado/Pesquisa/Hipp', launch.browser = FALSE, port = 4907)
Thu Nov 16 22:23:48 2017
write.csv(source, "teste.csv")
shiny::runApp('~/Documentos/Mestrado/Pesquisa/Hipp', launch.browser = FALSE, port = 4907)
write.csv(source, "teste.csv")
getwd
getwd()
