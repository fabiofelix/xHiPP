MV2
T1 = matrix(c(1, 0, 0, 299.10044066594855,
0, 1, 0, -260.32050230924932,
0, 0, 1, 0,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
theta = 140.5556084391857 * pi / 180
tx = 43.810002047388139
ty = 288.63771284146515
tz = 0
TR1 = matrix(c(1, 0, 0, tx,
0, 1, 0, ty,
0, 0, 1, tz,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
R = matrix(c(cos(theta),  -sin(theta),  0, 0,
sin(theta),  cos(theta),  0, 0,
0,  0,  1, 0,
0,  0,  0, 1), nrow = 4, ncol = 4, byrow = TRUE)
TR2 = matrix(c(1, 0, 0, -tx,
0, 1, 0, -ty,
0, 0, 1, -tz,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
MV3 = T1 %*% TR1 %*% R %*%  TR2
C_AUX = MV3 %*% MV2 %*% MV1 %*% CEPHALOTORAX
A_AUX = MV3 %*% MV2 %*% MV1 %*% ABDOMEN
arrows(A_AUX[1], A_AUX[2], C_AUX[1], C_AUX[2], col = "black")
MV3
CEPHALOTORAX = matrix(c(300, 215, 0, 1))
ABDOMEN = matrix(c(300, 174.92, 0, 1))
plot(NA, xlim = c(0, 600), ylim = c(0, 400), xlab = "x", ylab = "y")
# text(c(465, 74, 303), c(319, 315, 32), labels = c("1", "2", "3"))
# abline(h = 0, v = 0, col = "gray")
# abline(h = 400, v = 600, col = "gray")
arrows(ABDOMEN[1], ABDOMEN[2], CEPHALOTORAX[1], CEPHALOTORAX[2], col = "red")
text(c(465, 74, 303), c(319, 315, 32), labels = c("M1", "M2", "M3"))
#===============================MV1===========================================
T1 = matrix(c(1, 0, 0, 165,
0, 1, 0, 103.99999999999979,
0, 0, 1, 0,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
theta = -48.872144196193375 * pi / 180
tx = 300
ty = 174.92000000000002
tz = 0
TR1 = matrix(c(1, 0, 0, tx,
0, 1, 0, ty,
0, 0, 1, tz,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
R = matrix(c(cos(theta),  -sin(theta),  0, 0,
sin(theta),  cos(theta),  0, 0,
0,  0,  1, 0,
0,  0,  0, 1), nrow = 4, ncol = 4, byrow = TRUE)
TR2 = matrix(c(1, 0, 0, -tx,
0, 1, 0, -ty,
0, 0, 1, -tz,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
MV1 = T1 %*% TR1 %*% R %*%  TR2
C_AUX = MV1 %*% CEPHALOTORAX
A_AUX = MV1 %*% ABDOMEN
arrows(A_AUX[1], A_AUX[2], C_AUX[1], C_AUX[2], col = "green")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
CEPHALOTORAX = matrix(c(300, 215, 0, 1))
ABDOMEN = matrix(c(300, 174.92, 0, 1))
plot(NA, xlim = c(0, 600), ylim = c(0, 400), xlab = "x", ylab = "y")
# text(c(465, 74, 303), c(319, 315, 32), labels = c("1", "2", "3"))
# abline(h = 0, v = 0, col = "gray")
# abline(h = 400, v = 600, col = "gray")
arrows(ABDOMEN[1], ABDOMEN[2], CEPHALOTORAX[1], CEPHALOTORAX[2], col = "red")
text(c(465, 74, 303), c(319, 315, 32), labels = c("M1", "M2", "M3"))
#===============================MV1===========================================
T1 = matrix(c(1, 0, 0, 165,
0, 1, 0, 103.99999999999979,
0, 0, 1, 0,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
theta = -48.872144196193375 * pi / 180
tx = 300
ty = 174.92000000000002
tz = 0
TR1 = matrix(c(1, 0, 0, tx,
0, 1, 0, ty,
0, 0, 1, tz,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
R = matrix(c(cos(theta),  -sin(theta),  0, 0,
sin(theta),  cos(theta),  0, 0,
0,  0,  1, 0,
0,  0,  0, 1), nrow = 4, ncol = 4, byrow = TRUE)
TR2 = matrix(c(1, 0, 0, -tx,
0, 1, 0, -ty,
0, 0, 1, -tz,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
MV1 = T1 %*% TR1 %*% R %*%  TR2
C_AUX = MV1 %*% CEPHALOTORAX
A_AUX = MV1 %*% ABDOMEN
arrows(A_AUX[1], A_AUX[2], C_AUX[1], C_AUX[2], col = "green")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
CEPHALOTORAX = matrix(c(300, 215, 0, 1))
ABDOMEN = matrix(c(300, 174.92, 0, 1))
plot(NA, xlim = c(0, 600), ylim = c(0, 400), xlab = "x", ylab = "y")
# text(c(465, 74, 303), c(319, 315, 32), labels = c("1", "2", "3"))
# abline(h = 0, v = 0, col = "gray")
# abline(h = 400, v = 600, col = "gray")
arrows(ABDOMEN[1], ABDOMEN[2], CEPHALOTORAX[1], CEPHALOTORAX[2], col = "red")
text(c(465, 74, 303), c(319, 315, 32), labels = c("M1", "M2", "M3"))
#===============================MV1===========================================
T1 = matrix(c(1, 0, 0, 165,
0, 1, 0, 103.99999999999979,
0, 0, 1, 0,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
theta = -48.872144196193375 * pi / 180
tx = 300
ty = 174.92000000000002
tz = 0
TR1 = matrix(c(1, 0, 0, tx,
0, 1, 0, ty,
0, 0, 1, tz,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
R = matrix(c(cos(theta),  -sin(theta),  0, 0,
sin(theta),  cos(theta),  0, 0,
0,  0,  1, 0,
0,  0,  0, 1), nrow = 4, ncol = 4, byrow = TRUE)
TR2 = matrix(c(1, 0, 0, -tx,
0, 1, 0, -ty,
0, 0, 1, -tz,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
MV1 = T1 %*% TR1 %*% R %*%  TR2
C_AUX = MV1 %*% CEPHALOTORAX
A_AUX = MV1 %*% ABDOMEN
arrows(A_AUX[1], A_AUX[2], C_AUX[1], C_AUX[2], col = "green")
source('~/.active-rstudio-document', echo=TRUE)
C_AUX
A_AUX
CEPHALOTORAX = matrix(c(300, 215, 0, 1))
ABDOMEN = matrix(c(300, 174.92, 0, 1))
plot(NA, xlim = c(0, 700), ylim = c(0, 400), xlab = "x", ylab = "y")
# text(c(465, 74, 303), c(319, 315, 32), labels = c("1", "2", "3"))
# abline(h = 0, v = 0, col = "gray")
# abline(h = 400, v = 600, col = "gray")
arrows(ABDOMEN[1], ABDOMEN[2], CEPHALOTORAX[1], CEPHALOTORAX[2], col = "red")
text(c(465, 74, 303), c(319, 315, 32), labels = c("M1", "M2", "M3"))
#===============================MV1===========================================
T1 = matrix(c(1, 0, 0, 165,
0, 1, 0, 103.99999999999979,
0, 0, 1, 0,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
theta = -48.872144196193375 * pi / 180
tx = 300
ty = 174.92000000000002
tz = 0
TR1 = matrix(c(1, 0, 0, tx,
0, 1, 0, ty,
0, 0, 1, tz,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
R = matrix(c(cos(theta),  -sin(theta),  0, 0,
sin(theta),  cos(theta),  0, 0,
0,  0,  1, 0,
0,  0,  0, 1), nrow = 4, ncol = 4, byrow = TRUE)
TR2 = matrix(c(1, 0, 0, -tx,
0, 1, 0, -ty,
0, 0, 1, -tz,
0, 0, 0, 1), nrow = 4, ncol = 4, byrow = TRUE)
MV1 = T1 %*% TR1 %*% R %*%  TR2
C_AUX = MV1 %*% CEPHALOTORAX
A_AUX = MV1 %*% ABDOMEN
arrows(A_AUX[1], A_AUX[2], C_AUX[1], C_AUX[2], col = "green")
source('~/.active-rstudio-document', echo=TRUE)
plot(NA, xlim = c(0, 700), ylim = c(0, 400), xlab = "x", ylab = "y")
plot(NA, xlim = c(0, 600), ylim = c(0, 400), xlab = "x", ylab = "y")
lines(c(P2_CENTRAL1[1], P2_CENTRAL2[1]), c(P2_CENTRAL1[2], P2_CENTRAL2[1]))
P2_CENTRAL1 = c(288.5, 218.75)
P2_CENTRAL2 = c(276, 226.25)
lines(c(P2_CENTRAL1[1], P2_CENTRAL2[1]), c(P2_CENTRAL1[2], P2_CENTRAL2[1]))
lines(c(P2_CENTRAL1[1], P2_CENTRAL2[1], P2_CENTRAL4[1]), c(P2_CENTRAL1[2], P2_CENTRAL2[1], P2_CENTRAL4[2]))
P2_CENTRAL4 = c(276, 226.25)
lines(c(P2_CENTRAL1[1], P2_CENTRAL2[1], P2_CENTRAL4[1]), c(P2_CENTRAL1[2], P2_CENTRAL2[1], P2_CENTRAL4[2]))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
P3_CENTRAL1 = c(288.5, 212)
P3_CENTRAL2 = c(276, 214.25)
# P3_CENTRAL3 = c(276, 214.25)
P3_CENTRAL4 = c(257.25, 203.75)
lines(c(P3_CENTRAL1[1], P3_CENTRAL2[1], P3_CENTRAL4[1]), c(P3_CENTRAL1[2], P3_CENTRAL2[1], P3_CENTRAL4[2]))
P2_CENTRAL1 = c(288.5, 218.75)
P2_CENTRAL2 = c(276, 226.25)
P2_CENTRAL4 = c(257.25, 226.4)
lines(c(P2_CENTRAL1[1], P2_CENTRAL2[1], P2_CENTRAL4[1]), c(P2_CENTRAL1[2], P2_CENTRAL2[1], P2_CENTRAL4[2]))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
P1 = matrix(c(4, 3, -5, 1))
P2 = matrix(c(7, 2, -5, 1))
P3 = matrix(c(6, 5, -5, 1))
P4 = matrix(c(4, 5,  4, 1))
require(rgl)
plot3d(P1)
plot3d(c(P1[1], P2[1], P3[1], P4[1]), c(P1[2], P2[2], P3[2], P4[2]), c(P1[3], P2[3], P3[3], P4[3]))
plot3d(c(P1[1], P2[1], P3[1], P4[1]), c(P1[2], P2[2], P3[2], P4[2]), c(P1[3], P2[3], P3[3], P4[3]), type = "l")
plot3d(c(P1[1], P2[1], P4[1], P1[1]), c(P1[2], P2[2], P4[2], P1[2]), c(P1[3], P2[3], P4[3], P13]), type = "l")
plot3d(c(P1[1], P2[1], P4[1], P1[1]), c(P1[2], P2[2], P4[2], P1[2]), c(P1[3], P2[3], P4[3], P1[3]), type = "l")
plot3d(c(P1[1], P2[1], P4[1], P1[1], P4[1], P3[1], P4[1]),
c(P1[2], P2[2], P4[2], P1[2], P4[2], P3[2], P4[2]),
c(P1[3], P2[3], P4[3], P1[3], P4[3], P3[3], P4[3]), type = "l")
plot3d(c(P1[1], P2[1], P4[1], P1[1], P4[1], P3[1], P2[1]),
c(P1[2], P2[2], P4[2], P1[2], P4[2], P3[2], P2[2]),
c(P1[3], P2[3], P4[3], P1[3], P4[3], P3[3], P2[3]), type = "l")
u = P2 - P1
v = P4 - P1
u
v
w = matrix(c(u[2] * v[3] - u[3] * v[2],
u[3] * v[1] - u[1] * v[3],
u[1] * v[2] - u[2] * v[1],
1))
w
P1 = matrix(c(4, 3, -5))
P2 = matrix(c(7, 2, -5))
P3 = matrix(c(6, 5, -5))
P4 = matrix(c(4, 5,  4))
u = P2 - P1
v = P4 - P1
w = matrix(c(u[2] * v[3] - u[3] * v[2],
u[3] * v[1] - u[1] * v[3],
u[1] * v[2] - u[2] * v[1],
1))
w = w / sqrt(sum(w^2))
w
w %*% w
w %*% t(w)
sum(w^2)
sqrt(sum(w^2))
w
-3/7
-9/7
37
3/7
w * P1
w
P1
P1 = matrix(c(4, 3, -5))
P2 = matrix(c(7, 2, -5))
P3 = matrix(c(6, 5, -5))
P4 = matrix(c(4, 5,  4))
require(rgl)
plot3d(c(P1[1], P2[1], P4[1], P1[1], P4[1], P3[1], P2[1]),
c(P1[2], P2[2], P4[2], P1[2], P4[2], P3[2], P2[2]),
c(P1[3], P2[3], P4[3], P1[3], P4[3], P3[3], P2[3]), type = "l")
u = P2 - P1
v = P4 - P1
w = matrix(c(u[2] * v[3] - u[3] * v[2],
u[3] * v[1] - u[1] * v[3],
u[1] * v[2] - u[2] * v[1]))
w = w / sqrt(sum(w^2))
w
w * P1
sum(w * P1)
u
v
w
w = matrix(c(u[2] * v[3] - u[3] * v[2],
u[3] * v[1] - u[1] * v[3],
u[1] * v[2] - u[2] * v[1]))
w
sqrt(sum(w^2))
w^2
27^2
sum(w^2)
141 / 2
141 / 3
sum(w^2)
sqrt(sum(w^2))
w^2
sum(w^2)
sqrt(sum(w^2))
3*sqrt(94)
w = matrix(c(u[2] * v[3] - u[3] * v[2],
u[3] * v[1] - u[1] * v[3],
u[1] * v[2] - u[2] * v[1]))
w = w / sqrt(sum(w^2))
w
w * P1
sum(w * P1)
d = sum(w * P1)
d * -1
d
d
d * -1
ls
d
d * -1
ls
d
d = d * -1
d = -1 * sum(w * P1)
d
d = -1 * sum(w * P2)
d
d = -1 * sum(w * P3)
d
d = -1 * sum(w * P4)
d
w
c(u, v)
matrix(c(u, v), nrow = 3)
matrix(c(u, v, 1, 1, 1), nrow = 3)
?crossprod()
u
u %*% v
u %*% t(v)
t(u) %*% v
t(w) %*% w
u = P2 - P1
v = P4 - P1
w = matrix(c(u[2] * v[3] - u[3] * v[2],
u[3] * v[1] - u[1] * v[3],
u[1] * v[2] - u[2] * v[1]))
w = w / sqrt(t(w) %*% w)
d = -1 * sum(w * P4)
t(w) %*% w
sqrt(t(w) %*% w)
w = w / sqrt(t(w) %*% w)
w
t(w)
t(w) %*% w
sqrt(t(w) %*% w)
w / sqrt(t(w) %*% w)
w = w / as.numeric(sqrt(t(w) %*% w))
d = -1 * sum(w * P4)
d
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ORTHO
source('~/.active-rstudio-document', echo=TRUE)
ORTHO
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cot(45)
?acos
PESPECTIVE = matrix(c(
(1 / (theta / 2)) / aspect , 0, 0, 0,
0, 1 / (theta / 2), 0, 0
0 , 0, (d_near + d_far) / (d_near - d_near), -2 * (d_far * d_near) / (d_near - d_far),
0, 0, -1, 0
), nrow = 4, byrow = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
(d_near - d_near)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
aspect
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('~/Documentos/Mestrado/Pesquisa/Hipp', launch.browser = FALSE, port = 4907)
shiny::runApp('~/Documentos/Mestrado/Pesquisa/Hipp', launch.browser = FALSE, port = 4907)
shiny::runApp('~/Documentos/Mestrado/Pesquisa/Hipp', launch.browser = FALSE, port = 4907)
k
is.null(k)
is.null(k) || is.na(k)
k
original
nrow(original)
sqrt(nrow(original))
floor(sqrt(nrow(original)))
k
shiny::runApp('~/Documentos/Mestrado/Pesquisa/Hipp', launch.browser = FALSE, port = 4907)
qt_cluster
source('~/Documentos/shared_src/R/utils.R', echo=TRUE)
source('~/Documentos/shared_src/R/text_mining.R', echo=TRUE)
p = preprocess.text("~/Documentos/Mestrado/Pesquisa/Hipp/www/data/text")
debug(extract.topic.terms)
topics = extract.topic.terms(p$term.matrix, qt.topics = 10);
new_row
colnames(iris[, "Species"])
colnames(iris)
which(colnames(iris) == "Species")
source('~/Documentos/shared_src/R/text_mining.R', echo=TRUE)
debugSource('~/Documentos/Mestrado/Pesquisa/Hipp/aux.R', echo=TRUE)
tree.terms
View(tree.terms)
tree.topics
topic.list
topic.list = topic.list[order(topic.list, decreasing = TRUE)]
topic.list
topic.list[1]
colnames(topic.list)[1]
names(topic.list)[1]
tree.terms
tree.terms  = topics[which(topics$name %in% get.tree.names(tree)), -1]
tree.terms
tree.topics = tree.terms[, "TOPIC"]
tree.topics
topic.list = table(tree.topics);
topics.list
topic.list
table(topic.list)
table(tree.topics)
which.max(table(tree.topics))
topic.list = which.max(table(tree.topics))
topic.list
topic.list
names(topic.list)
topic.list = names(topic.list)
tree.terms
tree.terms[, "TOPIC"] == topic.list
which(tree.terms[, "TOPIC"] == topic.list)
tree.terms  = topics[which(topics$name %in% get.tree.names(tree)), -1]
tree.topics = tree.terms[, "TOPIC"]
topic.words = c()
topic.words
tree.terms
index.topic = which(colnames(tree.terms) == "TOPIC")
index.topic
topic.words = table(tree.topics);
topic.words
topic.words = which.max(topic.words)
topic.words
topic.words = names(topic.words)
topic.words
topic.words = which(tree.terms[, "TOPIC"] == topic.words)
topic.words
topic.words = tree.terms[topic.words[1], -index.topic]
topic.words
as.vector(topic.words)
as.vector(topic.words)
topic.words = as.vector(topic.words)
topic.words
debugSource('~/Documentos/Mestrado/Pesquisa/Hipp/shared/text_mining.R', echo=TRUE)
source('~/Documentos/Mestrado/Pesquisa/Hipp/aux.R', echo=TRUE)
source('~/Documentos/Mestrado/Pesquisa/Hipp/aux.R', echo=TRUE)
tree
debug(get.tree.topic.new)
tree = extract.tree.topics.new(tree, "www/data/text", NULL, data)
topic.words
unlist(topic.words)
abc = unlist(topic.words)
abc
abc = as.vector(topic.words)
abc
class(topic.words)
as.list(topic.words)
unlist(as.list(topic.words))
topic.words
topic.words[1, ]
topic.words[2, ]
topic.words[1, ]
topic.words[1]
c(topic.words)
topic.words
as.matrix(topic.words)
as.matrix(topic.words)[1]
as.matrix(topic.words)[1, ]
as.vector(as.matrix(topic.words)[1, ])
topic.words
unname(topic.words)
as.vector(unname(topic.words))
unname(unlist(topic.words))
unlist(topic.words)
as.vector(unlist(topic.words))
source('~/Documentos/Mestrado/Pesquisa/Hipp/shared/text_mining.R', echo=TRUE)
source('~/Documentos/shared_src/R/text_mining.R', echo=TRUE)
debug(get.tree.topic.new)
tree = extract.tree.topics.new(tree, "www/data/text", NULL, data)
source('~/Documentos/shared_src/R/text_mining.R', echo=TRUE)
tree = extract.tree.topics.new(tree, "www/data/text", NULL, data)
s_json = toJSON(tree, pretty = TRUE, auto_unbox = TRUE);
jsonlite::write_json(s_json, get.file.path(basename(PATH)));
source('~/Documentos/shared_src/R/text_mining.R', echo=TRUE)
tree = extract.tree.topics.new(tree, "www/data/text", NULL, data)
source('~/Documentos/shared_src/R/text_mining.R', echo=TRUE)
tree = extract.tree.topics.new(tree, "www/data/text", NULL, data)
tree = extract.tree.topics.new(tree, "www/data/text", NULL, data)
tree$topics
tree$topics[-6]
length(tree$topics)
source('~/Documentos/shared_src/R/text_mining.R', echo=TRUE)
source('~/Documentos/shared_src/R/text_mining.R', echo=TRUE)
tree = extract.tree.topics.new(tree, "www/data/text", NULL, data)
s_json = toJSON(tree, pretty = TRUE, auto_unbox = TRUE);
jsonlite::write_json(s_json, get.file.path(basename(PATH)));
